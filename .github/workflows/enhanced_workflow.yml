name: Two-Stage Crypto Scanner

on:
  schedule:
    # 15m analysis: Run at :02, :17, :32, :47 UTC
    - cron: '2,17,32,47 * * * *'
    # 5m analysis: Run at :06, :11, :16, :21, :26, :31, :36, :41, :46, :51, :56, :01 UTC
    - cron: '1,6,11,16,21,26,31,36,41,46,51,56 * * * *'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      analysis_type:
        description: 'Analysis type to run'
        required: true
        default: 'both'
        type: choice
        options:
        - '15m'
        - '5m'
        - 'both'

jobs:
  determine-analysis-type:
    runs-on: ubuntu-latest
    outputs:
      run_15m: ${{ steps.determine.outputs.run_15m }}
      run_5m: ${{ steps.determine.outputs.run_5m }}
    steps:
    - name: Determine analysis type
      id: determine
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          case "${{ github.event.inputs.analysis_type }}" in
            "15m")
              echo "run_15m=true" >> $GITHUB_OUTPUT
              echo "run_5m=false" >> $GITHUB_OUTPUT
              ;;
            "5m")
              echo "run_15m=false" >> $GITHUB_OUTPUT
              echo "run_5m=true" >> $GITHUB_OUTPUT
              ;;
            "both")
              echo "run_15m=true" >> $GITHUB_OUTPUT
              echo "run_5m=true" >> $GITHUB_OUTPUT
              ;;
          esac
        else
          # Scheduled run - determine by current minute
          MINUTE=$(date -u +%M | sed 's/^0//')
          if [ $MINUTE -eq 2 ] || [ $MINUTE -eq 17 ] || [ $MINUTE -eq 32 ] || [ $MINUTE -eq 47 ]; then
            echo "run_15m=true" >> $GITHUB_OUTPUT
            echo "run_5m=false" >> $GITHUB_OUTPUT
          else
            echo "run_15m=false" >> $GITHUB_OUTPUT
            echo "run_5m=true" >> $GITHUB_OUTPUT
          fi
        fi

  analyze-15m:
    needs: determine-analysis-type
    if: needs.determine-analysis-type.outputs.run_15m == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Pull latest changes
      run: git pull origin main
      
    - name: Run 15-minute analysis
      run: python src/main.py --analyze-15m
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        STAGE1_TELEGRAM_CHAT_ID: ${{ secrets.STAGE1_TELEGRAM_CHAT_ID }}
        STAGE2_TELEGRAM_CHAT_ID: ${{ secrets.STAGE2_TELEGRAM_CHAT_ID }}
        COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        BINGX_API_KEY: ${{ secrets.BINGX_API_KEY }}
        BINGX_SECRET_KEY: ${{ secrets.BINGX_SECRET_KEY }}
        
    - name: Commit and push database changes
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add src/database/signals.db || true
        if git diff --staged --quiet; then
          echo "No database changes to commit"
        else
          git commit -m "Update signals database after 15m analysis - $(date -u)"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: 15m-analysis-logs-${{ github.run_id }}
        path: crypto_scanner.log
        retention-days: 3

  analyze-5m:
    needs: determine-analysis-type
    if: needs.determine-analysis-type.outputs.run_5m == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Pull latest changes
      run: git pull origin main
      
    - name: Run 5-minute analysis
      run: python src/main.py --analyze-5m
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        STAGE1_TELEGRAM_CHAT_ID: ${{ secrets.STAGE1_TELEGRAM_CHAT_ID }}
        STAGE2_TELEGRAM_CHAT_ID: ${{ secrets.STAGE2_TELEGRAM_CHAT_ID }}
        COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}
        BINGX_API_KEY: ${{ secrets.BINGX_API_KEY }}
        BINGX_SECRET_KEY: ${{ secrets.BINGX_SECRET_KEY }}
        
    - name: Commit and push database changes
      run: |
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add src/database/signals.db || true
        if git diff --staged --quiet; then
          echo "No database changes to commit"
        else
          git commit -m "Update signals database after 5m analysis - $(date -u)"
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: 5m-analysis-logs-${{ github.run_id }}
        path: crypto_scanner.log
        retention-days: 3
